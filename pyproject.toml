[project]
name = "live-translation-ai"
version = "0.1.0"
description = "A locally-run, privacy-first live translation tool with real-time capabilities"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
requires-python = ">=3.11,<3.12"
dependencies = [
    "pydantic>=2.11.9,<3.0.0",
    "pydantic-settings>=2.10.1,<3.0.0",
    "openai-whisper>=20231117",
    "click>=8.2.1,<9.0.0",
    "rich>=14.1.0,<15.0.0",
    "structlog>=25.4.0,<26.0.0",
    "sounddevice>=0.5.2,<1.0.0",
    "numpy>=1.24.0,<2.0.0",
    "langdetect>=1.0.9,<2.0.0",
    "torch>=2.0.0",
    "triton>=2.3.1; sys_platform == 'linux'",
    "sentencepiece>=0.2.1",
    "librosa>=0.11.0",
    "soundfile>=0.13.1",
    "tts>=0.22.0",
    "scipy>=1.10.0",
    "transformers>=4.21.0,<4.50.0",
]

[project.scripts]
translate = "live_translation.api.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "hypothesis>=6.92.0,<7.0.0",
    "ruff>=0.1.8,<1.0.0",
    "mypy>=1.8.0,<2.0.0",
    "black>=23.12.0,<25.0.0",
    "pre-commit>=3.6.0,<4.0.0",
    "pylint>=3.0.0,<4.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/live_translation"]

[dependency-groups]
dev = [
    "black>=24.10.0",
    "isort>=6.0.1",
    "langchain>=0.3.27",
    "langchain-community>=0.3.29",
    "mypy>=1.18.1",
    "pre-commit>=3.8.0",
    "pylint>=3.3.8",
    "pytest>=7.4.4",
    "pytest-mock>=3.15.1",
    "ruff>=0.13.0",
]

[tool.mypy]
python_version = "3.11"
# Relaxed settings for practical development
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true
# Focus only on critical errors
show_error_codes = false

# Ignore all external library modules
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "numpy.*",
    "librosa.*",
    "soundfile.*",
    "sounddevice.*",
    "langdetect.*",
    "transformers.*",
    "whisper.*",
    "langchain_core.*",
    "structlog.*",
    "click.*",
    "rich.*",
    "pytest.*"
]
ignore_missing_imports = true
ignore_errors = true

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["live_translation"]
# Detect and warn about inline imports
force_sort_within_sections = true

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ICN",   # flake8-import-conventions
    "PLC",   # pylint convention
    "PLE",   # pylint errors
    "PLR",   # pylint refactor
    "PLW",   # pylint warnings
]
ignore = [
    "E501",   # line too long (handled by black)
    "PLR0913", # too many arguments
    "PLR2004", # magic value used in comparison
    "PLR0912", # too many branches (code complexity)
    "PLR0915", # too many statements (code complexity)
    "UP038",   # isinstance with union types (minor style issue)
    "I001",    # Import block is un-sorted or un-formatted (handled by isort)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["PLR2004"]  # Allow magic values in tests
